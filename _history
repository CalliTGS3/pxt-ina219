{"entries":[{"timestamp":1732768911897,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"/**\n* Calliope mini Extension for INA219 Current Power supply sensor module\n*\n* Thanks to Wolfgang Ewald https://wolles-elektronikkiste.de/ina219\n*\n* @author Raik Andritschke\n*/\n\n// INA219 I2C Adresse\nenum INA219ADDR {\n    //% block=\"0x40\"\n    X40 = 0x40,\n    //% block=\"0x41\"\n    X41 = 0x41,\n    //% block=\"0x44\"\n    X44 = 0x44,\n    //% block=\"0x45\"\n    X45 = 0x45\n};\n\n// Config Register (R/W)\nconst REG_CONFIG = 0x00;\n\n// SHUNT VOLTAGE REGISTER (R)\nconst REG_SHUNTVOLTAGE = 0x01;\n\n// BUS VOLTAGE REGISTER (R)\nconst REG_BUSVOLTAGE = 0x02;\n\n// POWER REGISTER (R)\nconst REG_POWER = 0x03;\n\n// CURRENT REGISTER (R)\nconst REG_CURRENT = 0x04;\n\n// CALIBRATION REGISTER (R/W)\nconst REG_CALIBRATION = 0x05;\n\nenum BusVoltageRange {\n    RANGE_16V = 0x00, // set bus voltage range to 16V\n    RANGE_32V = 0x01  // set bus voltage range to 32V (default)\n}\n\nenum Gain {\n    DIV_1_40MV = 0x00,  // shunt prog. gain set to  1, 40 mV range\n    DIV_2_80MV = 0x01,  // shunt prog. gain set to /2, 80 mV range\n    DIV_4_160MV = 0x02, // shunt prog. gain set to /4, 160 mV range\n    DIV_8_320MV = 0x03  // shunt prog. gain set to /8, 320 mV range\n}\n\nenum ADCResolution {\n    /**\n     * Constants for bus_adc_resolution or shunt_adc_resolution\n     */\n    ADCRES_9BIT_1S = 0x00,   //  9 bit,  1 sample,     84us\n    ADCRES_10BIT_1S = 0x01,  // 10 bit,  1 sample,    148us\n    ADCRES_11BIT_1S = 0x02,  // 11 bit,  1 sample,    276us\n    ADCRES_12BIT_1S = 0x03,  // 12 bit,  1 sample,    532us\n    ADCRES_12BIT_2S = 0x09,  // 12 bit,  2 samples,  1.06ms\n    ADCRES_12BIT_4S = 0x0A,  // 12 bit,  4 samples,  2.13ms\n    ADCRES_12BIT_8S = 0x0B,  // 12 bit,  8 samples,  4.26ms\n    ADCRES_12BIT_16S = 0x0C, // 12 bit, 16 samples,  8.51ms\n    ADCRES_12BIT_32S = 0x0D, // 12 bit, 32 samples, 17.02ms\n    ADCRES_12BIT_64S = 0x0E, // 12 bit, 64 samples, 34.05ms\n    ADCRES_12BIT_128S = 0x0F // 12 bit,128 samples, 68.10ms\n}\n\nenum Mode {\n    /**\n     * Constants for mode\n     */\n    POWERDOWN = 0x00,           // power down\n    SVOLT_TRIGGERED = 0x01,     // shunt voltage triggered\n    BVOLT_TRIGGERED = 0x02,     // bus voltage triggered\n    SANDBVOLT_TRIGGERED = 0x03, // shunt and bus voltage triggered\n    ADCOFF = 0x04,              // ADC off\n    SVOLT_CONTINUOUS = 0x05,    // shunt voltage continuous\n    BVOLT_CONTINUOUS = 0x06,    // bus voltage continuous\n    SANDBVOLT_CONTINUOUS = 0x07 // shunt and bus voltage continuous\n}\n\n/**\n * Custom blocks\n */\n//% weight=20 color=#0fbc11 icon=\"\"\nnamespace ina219 {\n\n    let I2CADDR = INA219ADDR.X40;\n\n    let current_lsb = 10;\n    let cal_value = 4096;\n    let power_lsb = 2;\n\n    const INA219_RST = 0x8000;\n\n    //% blockId=\"init\" block=\"Initialisiere den Sensor INA219 mit I2C Adresse %addr\"\n    export function init(addr: INA219ADDR): void {\n        I2CADDR = addr;\n    }\n\n    function readRegister(register: number): number {\n        pins.i2cWriteNumber(I2CADDR, register, NumberFormat.UInt8LE, false)\n        let buffer = pins.i2cReadBuffer(I2CADDR, 2, false)\n        return pins.i2cReadNumber(I2CADDR, NumberFormat.UInt16BE, false);\n    }\n\n    function writeRegister(register: number, value: number): void {\n        let temp: Buffer = pins.createBuffer(3);\n        temp[0] = register;\n        temp[1] = value >> 8;\n        temp[2] = value & 255;\n        pins.i2cWriteBuffer(I2CADDR, temp, false);\n    }\n\n    //% blockId=\"reset\" block=\"Setze den Sensor zurück\"\n    export function reset(): void {\n        writeRegister(REG_CONFIG, INA219_RST);\n    }\n\n    //% blockId=\"setCalibration\" block=\"Kalibriere den Sensor auf %gain\"\n    export function setCalibration(gain: Gain): void {\n        /**\n         * bus voltage range << 13\n         * gain << 11\n         * bus ADC resolution << 7\n         * shunt ADC resolution << 3\n         * mode\n         */\n        //serial.writeLine(\"gain: \" + convertToText(gain))\n        let config = BusVoltageRange.RANGE_32V << 13\n            | gain << 11\n            | ADCResolution.ADCRES_12BIT_8S << 7\n            | ADCResolution.ADCRES_12BIT_8S << 3\n            | Mode.SANDBVOLT_CONTINUOUS;\n        writeRegister(REG_CONFIG, config);\n\n        switch (gain) {\n            case Gain.DIV_8_320MV: {\n                current_lsb = 10;\n                cal_value = 4096;\n                power_lsb = 2;\n                break;\n            }\n            case Gain.DIV_4_160MV: {\n                current_lsb = 20;\n                cal_value = 8192;\n                power_lsb = 1;\n                break;\n            }\n            case Gain.DIV_2_80MV: {\n                current_lsb = 25;\n                cal_value = 10240;\n                power_lsb = .8;\n                break;\n            }\n            case Gain.DIV_1_40MV: {\n                current_lsb = 50;\n                cal_value = 20480;\n                power_lsb = .4;\n                break;\n            }\n        }\n        writeRegister(REG_CALIBRATION, cal_value);\n        //serial.writeLine(\"cal_value: \" + convertToText(cal_value))\n    }\n\n    // setMaxCurrentShunt(5, 0.002);\n    function setMaxCurrentShunt(maxCurrent: number, shunt: number): void {\n        if (maxCurrent < 0.001) return;\n        if (shunt < 0.001) return;\n\n        //  _current_LSB = maxCurrent / 32768;\n        current_lsb = maxCurrent * 3.0517578125e-5;\n        power_lsb = current_lsb * 20;\n\n        let calib = (0.04096 / (current_lsb * shunt));\n        writeRegister(REG_CALIBRATION, calib);\n    }\n\n    //% blockId=\"getShuntVoltage\" block=\"Ermittle Shunt Spannung in mV\"\n    export function getShuntVoltage(): number {\n        //writeRegister(REG_CALIBRATION, cal_value);\n        let value = readRegister(REG_SHUNTVOLTAGE);\n        if (value > 32767) {\n            value -= 65535;\n        }\n        //serial.writeString(\"Shunt: \")\n        //serial.writeNumber(value)\n        //serial.writeLine(\"\")\n        return value * 0.01;\n    }\n\n    //% blockId=\"getBusVoltage\" block=\"Ermittle Bus Spannung in V\"\n    export function getBusVoltage(): number {\n        //writeRegister(REG_CALIBRATION, cal_value);\n        let busVoltage = readRegister(REG_BUSVOLTAGE);\n        return (busVoltage >> 3) * 0.004;\n    }\n\n    //% blockId=\"getCurrentmA\" block=\"Ermittle Strom in mA\"\n    export function getCurrentmA(): number {\n        //writeRegister(REG_CALIBRATION, cal_value);\n        let value = readRegister(REG_CURRENT);\n        if (value > 32767) {\n            value -= 65535;\n        }\n        return value / current_lsb;\n    }\n\n    //% blockId=\"getPowerW\" block=\"Ermittle Leistung in mW\"\n    export function getPowerW(): number {\n        //writeRegister(REG_CALIBRATION, cal_value);\n        let value = readRegister(REG_POWER);\n        if (value > 32767) {\n            value -= 65535;\n        }\n        return value * power_lsb;\n    }\n\n}\n"],[0,"\n"]],"start1":0,"start2":0,"length1":6718,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"re\":"],[-1," \"*\",\n        \"v2\":"],[0," \"*\""]],"start1":84,"start2":84,"length1":27,"length2":8},{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":157,"start2":157,"length1":52,"length2":8},{"diffs":[[0,"pt-only\""],[1,",\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":229,"start2":229,"length1":11,"length2":42}]},{"type":"added","filename":"test.ts","value":"// Hier kann man Tests durchführen; diese Datei wird nicht kompiliert, wenn dieses Paket als Erweiterung verwendet wird.\n"},{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"}]}],"snapshots":[{"timestamp":1732768911896,"editorVersion":"7.0.3","text":{"main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-INA219\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1732768998395}